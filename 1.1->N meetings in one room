https://practice.geeksforgeeks.org/problems/n-meetings-in-one-room-1587115620/1

Example 1:

Input:
N = 6
start[] = {1,3,0,5,8,5}
end[] =  {2,4,6,7,9,9}
Output: 
4
Explanation:
Maximum four meetings can be held with
given start and end timings.
The meetings are - (1, 2),(3, 4), (5,7) and (8,9)
Example 2:

Input:
N = 3
start[] = {10, 12, 20}
end[] = {20, 25, 30}
Output: 
1
Explanation:
Only one meetings can be held
with given start and end timings.

Approch:
--------
step 1:create an array and put meeting time and end time together
step 2:sort an array with end time
step3: find the maximum number of meeting
      ->pehla meeting include krna hoga and count 1 kr denga 
step4: condition check-> ending time less than staring time of next meeting.

code:
-----
    bool cmp(pair<int,int> a,pair<int,int> b){
        
        return a.second < b.second;
    }
    
    int maxMeetings(int start[], int end[], int n)
    {
        //step 1:create an array and put meeting time and end time together
        vector<pair<int,int>>mTime;
        
        for(int i=0;i<n;i++){
            mTime.push_back(make_pair(start[i],end[i]));
        }
        
        //step 2:sort an array
        sort(mTime.begin(),mTime.end(),cmp);
        
        //step3: find the maximum number of meeting
        int count = 1; //pehla meeting include kr lia hai 
        
        int endTime = mTime[0].second;
        
        for(int i=1;i<n;i++){
            int startTime = mTime[i].first;
            if(endTime < startTime){
                count++;
                endTime = mTime[i].second;
            }
        }
        
        return count;
    }
