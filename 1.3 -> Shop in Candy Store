https://practice.geeksforgeeks.org/problems/shop-in-candy-store1145/1
Example 1:

Input:
N = 4
K = 2
candies[] = {3 2 1 4}

Output:
3 7

Explanation:
As according to the offer if you buy 
one candy you can take at most two 
more for free. So in the first case, 
you buy the candy which costs 1 and 
takes candies worth 3 and 4 for free, 
also you buy candy worth 2 as well.
So min cost : 1+2 =3.
In the second case, you can buy the 
candy which costs 4 and takes candies 
worth 1 and 2 for free, also you need 
to buy candy worth 3 as well. 
So max cost : 3+4 =7.
Example 2:

Input: 
N = 5
K = 4
candies[] = {3 2 1 4 5}

Output: 
1 5

Explanation:
For minimimum cost buy the candy with
the cost 1 and get all the other candies
for free.
For maximum cost buy the candy with
the cost 5 and get all other candies
for free.

Gready-Approch:
-------------
step1:sort the array(isa hama pata laag jaiga konsi sasti toffee and konsi mehangi)
step2:find minMoneyTofee
      //mini money mai hum candy starting sa khardidata hai.
      //free wala end mai sa toffee lelenga.
step3: find maxMoneyTofee
      //max money mai hum candy ending sa khardidata hai.
     //free wala hum starting sa lenga
     
Code:
----
vector<int> candyStore(int candies[], int N, int K)
    {
        vector<int> ans;
        //sort kr lo array ko ki pata lagjai konsi sasti hai and konsi mehangi
        sort(candies,candies+N);
        
        //mini cost lagega
        //mini money mai hum candy starting sa khardidata hai.
        //free wala end mai sa include krta hai
        int minCost = 0;
        int buy = 0;
        int fre = N-1;
        while(buy <= fre){
            minCost = minCost + candies[buy];
            buy++;
            fre = fre - K;
        }
        
        //max cost candy ka kitna lagenga
        //max money mai hum candy ending sa khardidata hai.
        //free wala hum starting sa lenga
        int maxCost = 0;
        buy = N-1;
        fre = 0;
        while(buy >= fre){
            maxCost = maxCost + candies[buy];
            buy--;
            fre = fre + K;
        }
        
        ans.push_back(minCost);
        ans.push_back(maxCost);
        return ans;
    }
